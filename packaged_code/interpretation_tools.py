import tensorflow as tf
import numpy as np

import matplotlib.pyplot as plt

from PIL import Image

from model import EBSDIndexingModel as model


def predict(image_input):
    '''
    This function outputs the predicted euler angles and pc values of a EBSD pattern.

    :param image_input: input images of the size (n,60,60,1) in format np.array, which
    can be generated by file read_h5. n = 1 is recommended.

    :return: n vectors (needs to be proved) of length 6, the first 3 elements are phi1,
    psi, phi2 in degrees and the last 3 elements are pcx, pcy, pcz.
    '''
    eval_data, eval_prediction, saver, save_path_ = model.initialize()

    with tf.Session() as sess:

        saver.restore(sess, save_path_)

        result = sess.run(eval_prediction, feed_dict={eval_data: image_input})
        for j in range(6):
            result[j] = result[j].tolist()
            result[j] = result[j][0][0]
            if j <= 2:
                result[j] = result[j] * 180 / np.pi

    return result


def feature_map(image_input, layer, filter, save=False, grey=True, format='png'):
    '''
    This function print the feature map of certain layer and filter of
    certain EBSD pattern to the console.

    :param image_input: input image of the size (1,60,60,1) in format
    np.array, which can be generated by file read_h5.

    :param layer: integer, indicates the convolutional layer. range: 1-4, 6-9

    :param filter: integer, indicates the filter. range: for layer 1-2: 256,
    for layer 3-4: 512, for layer 6-7: 256, for layer 8-9: 96

    :param save: boolean, whether to save the feature map.

    :param grey: boolean, whether to view and save the map in greys.

    :param format: string, indicates the format which you want to save the map
    '''
    eval_data, eval_prediction, saver, save_path_ = model.initialize()

    with tf.Session() as sess:

        saver.restore(sess, save_path_)

        f_maps = sess.run(tf.get_default_graph().get_tensor_by_name('conv' + str(layer) + '/Relu:0'),
                          feed_dict={eval_data: image_input})

        f_map = f_maps[:, :, :, filter]

        if layer in range(1, 5):
            f_size = 60
        if layer in range(6, 10):
            f_size = 30

        f_map = np.reshape(f_map, [f_size, f_size])

        im = Image.fromarray(f_map)

        if grey:
            im = im.convert('L')
            plt.imshow(f_map, cmap='Greys')
        else:
            plt.imshow(f_map)

        if save:
            im.save("conv" + str(layer) + "_" + str(filter) + "." + format)

    return
